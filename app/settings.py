"""
Django settings for baggageclaim project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY_FILE = os.path.join(BASE_DIR,'.secretkey')
try: # try loading secret key as environment variable first
    SECRET_KEY = os.environ['SECRET_KEY']
except KeyError:
    if os.path.exists(SECRET_KEY_FILE): # try loading secret key from file
        SECRET_KEY = open(SECRET_KEY_FILE).read().strip()
    else:
        SECRET_KEY = 'NO SECRET KEY' # use this for running other tasks that just need this variable defined

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost', '127.0.0.1',
    'www.baggageclaimmatching.com', 'baggageclaimmatching.com',
    'baggage-claim.herokuapp.com',
]


# Application definition

INSTALLED_APPS = [
    'profiles',
    'claims',
    'matches',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'cloudinary_storage',
    'django.contrib.staticfiles',
    'cloudinary',
    'django_celery_results',
    'django_cleanup.apps.CleanupConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

# Celery Settings
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_IGNORE_RESULT = False
# CELERY_TASK_TRACK_STARTED = True

SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"

LOGIN_URL = '/accounts/login/'
LOGOUT_REDIRECT_URL = '/' # TODO check this
LOGIN_REDIRECT_URL = '/mypassport' # TODO IS IT ?

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

has_db = os.environ.get('DB_NAME') is not None;    # TODO: use a right env var to detect production

sqlite_config = {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': 'local_db.sqlite3',
}

mysql_config = {
    'ENGINE': 'mysql.connector.django',
    'NAME': os.environ.get('DB_NAME', ''),
    'USER': os.environ.get('DB_USER', ''),
    'PASSWORD': os.environ.get('DB_PASS', ''),
    'HOST': os.environ.get('DB_HOST', 'localhost'),
    'PORT': '3306',
    'OPTIONS': {
        'sql_mode': 'STRICT_ALL_TABLES',
    },
}

DATABASES = {
    'default': sqlite_config 
        if not has_db 
        else mysql_config,
}

# NOTE Use DJANGO_DB environment variable to control the database used
use_database = os.environ.get('DJANGO_DB', 'default')
if use_database == 'sqlite3':
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    'assets/',
    'lib/',
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/baggageclaim.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# https://github.com/klis87/django-cloudinary-storage#requirements
# TODO: move it to environment variables
# export CLOUDINARY_URL=cloudinary://172334557367673:Of7oEugE1ypVWXWoe1SaUTgtWWY@baggageclaimmatching
CLOUDINARY_STORAGE = {
  'CLOUD_NAME': "baggageclaimmatching",
  'API_KEY': "172334557367673",
  'API_SECRET': "Of7oEugE1ypVWXWoe1SaUTgtWWY",
}
